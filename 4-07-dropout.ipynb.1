{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h2>TensorFlow による実装 ：手書きの数字の画像データ判定<br>\n",
       "活性化関数：ReLU<br>\n",
       "隠れ層：3層<br>\n",
       "dropout : ドロップアウトしない確率　学習時：0.5 テスト時：1.0\n",
       "    学習時とテスト時でドロップアウト率が変動するので、placeholder で定義しておく。\n",
       "</h2>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<h2>TensorFlow による実装 ：手書きの数字の画像データ判定<br>\n",
    "活性化関数：ReLU<br>\n",
    "隠れ層：3層<br>\n",
    "dropout : ドロップアウトしない確率　学習時：0.5 テスト時：1.0\n",
    "    学習時とテスト時でドロップアウト率が変動するので、placeholder で定義しておく。\n",
    "</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch: 0  loss: 2.28336  accuracy: 0.28275\n",
      "epoch: 1  loss: 2.16672  accuracy: 0.4175\n",
      "epoch: 2  loss: 1.17982  accuracy: 0.625125\n",
      "epoch: 3  loss: 0.768325  accuracy: 0.76575\n",
      "epoch: 4  loss: 0.571193  accuracy: 0.834\n",
      "epoch: 5  loss: 0.47362  accuracy: 0.86575\n",
      "epoch: 6  loss: 0.422134  accuracy: 0.871\n",
      "epoch: 7  loss: 0.346748  accuracy: 0.899625\n",
      "epoch: 8  loss: 0.309143  accuracy: 0.91075\n",
      "epoch: 9  loss: 0.283576  accuracy: 0.9185\n",
      "epoch: 10  loss: 0.262914  accuracy: 0.926625\n",
      "epoch: 11  loss: 0.237035  accuracy: 0.933125\n",
      "epoch: 12  loss: 0.22274  accuracy: 0.934125\n",
      "epoch: 13  loss: 0.207128  accuracy: 0.941375\n",
      "epoch: 14  loss: 0.199309  accuracy: 0.94275\n",
      "epoch: 15  loss: 0.177689  accuracy: 0.948125\n",
      "epoch: 16  loss: 0.162945  accuracy: 0.95525\n",
      "epoch: 17  loss: 0.153302  accuracy: 0.955875\n",
      "epoch: 18  loss: 0.142194  accuracy: 0.958875\n",
      "epoch: 19  loss: 0.129509  accuracy: 0.963125\n",
      "epoch: 20  loss: 0.127136  accuracy: 0.964\n",
      "epoch: 21  loss: 0.116768  accuracy: 0.96625\n",
      "epoch: 22  loss: 0.106704  accuracy: 0.971125\n",
      "epoch: 23  loss: 0.102559  accuracy: 0.971625\n",
      "epoch: 24  loss: 0.0994834  accuracy: 0.9725\n",
      "epoch: 25  loss: 0.0861507  accuracy: 0.977125\n",
      "epoch: 26  loss: 0.0856321  accuracy: 0.97725\n",
      "epoch: 27  loss: 0.0779699  accuracy: 0.978125\n",
      "epoch: 28  loss: 0.0735056  accuracy: 0.980125\n",
      "epoch: 29  loss: 0.0717347  accuracy: 0.978625\n",
      "accuracy:  0.941\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "np.random.seed(0)\n",
    "tf.set_random_seed(1234)\n",
    "\n",
    "'''\n",
    "データの生成\n",
    "'''\n",
    "mnist = datasets.fetch_mldata('MNIST original', data_home='.')\n",
    "\n",
    "n = len(mnist.data)\n",
    "N = 10000  # MNISTの一部を使う\n",
    "train_size = 0.8\n",
    "indices = np.random.permutation(range(n))[:N]  # ランダムにN枚を選択\n",
    "\n",
    "X = mnist.data[indices]\n",
    "y = mnist.target[indices]\n",
    "Y = np.eye(10)[y.astype(int)]  # 1-of-K 表現に変換\n",
    "\n",
    "X_train, X_test, Y_train, Y_test =\\\n",
    "    train_test_split(X, Y, train_size=train_size)\n",
    "\n",
    "'''\n",
    "モデル設定\n",
    "'''\n",
    "n_in = len(X[0])  # 784\n",
    "n_hidden = 200\n",
    "n_out = len(Y[0])  # 10\n",
    "\n",
    "\"\"\"\n",
    "tf.nn.dropout(x, keep_prob, noise_shape=None, seed=None, name=None)\n",
    "ドロップアウトを行う関数\n",
    " 第1引数: x\n",
    "  プーリング層からの出力をそのまま与えれば良い\n",
    " 第2引数: keep_prob\n",
    "  ロップアウトしない率\n",
    "  \n",
    "使用例\n",
    "# 2割をドロップアウトする\n",
    "tf.nn.dropout(res,0.8)\n",
    "\"\"\"\n",
    "\n",
    "x = tf.placeholder(tf.float32, shape=[None, n_in])\n",
    "t = tf.placeholder(tf.float32, shape=[None, n_out])\n",
    "keep_prob = tf.placeholder(tf.float32)  # ドロップアウトしない確率\n",
    "\n",
    "# 入力層 - 隠れ層\n",
    "W0 = tf.Variable(tf.truncated_normal([n_in, n_hidden], stddev=0.01))\n",
    "b0 = tf.Variable(tf.zeros([n_hidden]))\n",
    "h0 = tf.nn.relu(tf.matmul(x, W0) + b0)\n",
    "h0_drop = tf.nn.dropout(h0, keep_prob)\n",
    "\n",
    "# 隠れ層 - 隠れ層\n",
    "W1 = tf.Variable(tf.truncated_normal([n_hidden, n_hidden], stddev=0.01))\n",
    "b1 = tf.Variable(tf.zeros([n_hidden]))\n",
    "h1 = tf.nn.relu(tf.matmul(h0_drop, W1) + b1)\n",
    "h1_drop = tf.nn.dropout(h1, keep_prob)\n",
    "\n",
    "W2 = tf.Variable(tf.truncated_normal([n_hidden, n_hidden], stddev=0.01))\n",
    "b2 = tf.Variable(tf.zeros([n_hidden]))\n",
    "h2 = tf.nn.relu(tf.matmul(h1_drop, W2) + b2)\n",
    "h2_drop = tf.nn.dropout(h2, keep_prob)\n",
    "\n",
    "# 隠れ層 - 出力層\n",
    "W3 = tf.Variable(tf.truncated_normal([n_hidden, n_out], stddev=0.01))\n",
    "b3 = tf.Variable(tf.zeros([n_out]))\n",
    "y = tf.nn.softmax(tf.matmul(h2_drop, W3) + b3)\n",
    "\n",
    "cross_entropy = tf.reduce_mean(-tf.reduce_sum(t * tf.log(y),\n",
    "                               reduction_indices=[1]))\n",
    "train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\n",
    "\n",
    "correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(t, 1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "\n",
    "'''\n",
    "モデル学習\n",
    "'''\n",
    "epochs = 30\n",
    "batch_size = 200\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "sess = tf.Session()\n",
    "sess.run(init)\n",
    "\n",
    "n_batches = (int)(N * train_size) // batch_size\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    X_, Y_ = shuffle(X_train, Y_train)\n",
    "\n",
    "    for i in range(n_batches):\n",
    "        start = i * batch_size\n",
    "        end = start + batch_size\n",
    "\n",
    "        sess.run(train_step, feed_dict={\n",
    "            x: X_[start:end],\n",
    "            t: Y_[start:end],\n",
    "            keep_prob: 0.5\n",
    "        })\n",
    "\n",
    "    # 訓練データに対する学習の進み具合を出力\n",
    "    loss = cross_entropy.eval(session=sess, feed_dict={\n",
    "        x: X_,\n",
    "        t: Y_,\n",
    "        keep_prob: 1.0\n",
    "    })\n",
    "    acc = accuracy.eval(session=sess, feed_dict={\n",
    "        x: X_,\n",
    "        t: Y_,\n",
    "        keep_prob: 1.0\n",
    "    })\n",
    "    print('epoch:', epoch, ' loss:', loss, ' accuracy:', acc)\n",
    "\n",
    "'''\n",
    "予測精度の評価\n",
    "'''\n",
    "accuracy_rate = accuracy.eval(session=sess, feed_dict={\n",
    "    x: X_test,\n",
    "    t: Y_test,\n",
    "    keep_prob: 1.0\n",
    "})\n",
    "print('accuracy: ', accuracy_rate)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
